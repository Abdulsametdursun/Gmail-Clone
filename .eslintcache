[{"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\index.js":"1","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\App.js":"2","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\serviceWorker.js":"3","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\app\\store.js":"4","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Sidebar.js":"5","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Header.js":"6","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Mail.js":"7","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\firebase.js":"8","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\SendMail.js":"9","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Login.js":"10","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\EmailList.js":"11","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\features\\userSlice.js":"12","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\features\\mailSlice.js":"13","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\SidebarOption.js":"14","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\EmailRow.js":"15","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Section.js":"16","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\VirtualKeyboard.js":"17","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\utils\\filterEmails.js":"18","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\utils\\draftStorage.js":"19","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\utils\\googleAuth.js":"20","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\utils\\gmailApi.js":"21"},{"size":644,"mtime":1615206821000,"results":"22","hashOfConfig":"23"},{"size":3531,"mtime":1751591077235,"results":"24","hashOfConfig":"23"},{"size":5141,"mtime":1615206821000,"results":"25","hashOfConfig":"23"},{"size":260,"mtime":1615206821000,"results":"26","hashOfConfig":"23"},{"size":5127,"mtime":1751386594732,"results":"27","hashOfConfig":"23"},{"size":2642,"mtime":1751588780878,"results":"28","hashOfConfig":"23"},{"size":4321,"mtime":1751387030923,"results":"29","hashOfConfig":"23"},{"size":627,"mtime":1750800789910,"results":"30","hashOfConfig":"23"},{"size":2965,"mtime":1751590543758,"results":"31","hashOfConfig":"23"},{"size":1013,"mtime":1750786817060,"results":"32","hashOfConfig":"23"},{"size":9281,"mtime":1751589816068,"results":"33","hashOfConfig":"23"},{"size":462,"mtime":1615206821000,"results":"34","hashOfConfig":"23"},{"size":1018,"mtime":1751577226033,"results":"35","hashOfConfig":"23"},{"size":797,"mtime":1751333678480,"results":"36","hashOfConfig":"23"},{"size":2017,"mtime":1751577142084,"results":"37","hashOfConfig":"23"},{"size":414,"mtime":1751335659812,"results":"38","hashOfConfig":"23"},{"size":5357,"mtime":1751328606158,"results":"39","hashOfConfig":"23"},{"size":1078,"mtime":1751385383723,"results":"40","hashOfConfig":"23"},{"size":2312,"mtime":1751577261002,"results":"41","hashOfConfig":"23"},{"size":831,"mtime":1751591102104,"results":"42","hashOfConfig":"23"},{"size":2459,"mtime":1751591245114,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1lveh3x",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\index.js",[],["90","91"],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\App.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\serviceWorker.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\app\\store.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Sidebar.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Header.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Mail.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\firebase.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\SendMail.js",["92"],"import React, { useEffect } from 'react';\nimport './SendMail.css';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Button } from '@material-ui/core';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { closeSendMessage, selectDraft, clearDraft } from './features/mailSlice';\nimport { saveDraft, deleteDraft } from './utils/draftStorage';\nimport { sendGmailMessage } from './utils/gmailApi'; // âœ… Import Gmail send\n\nfunction SendMail() {\n  const draft = useSelector(selectDraft);\n  const { register, handleSubmit, errors, reset } = useForm({\n    defaultValues: draft || {},\n  });\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    reset(draft || {});\n  }, [draft, reset]);\n\n  const onSubmit = async (formData) => {\n    console.log(formData);\n\n    try {\n      await sendGmailMessage({\n        to: formData.to,\n        subject: formData.subject,\n        message: formData.message,\n      });\n      alert('Email sent successfully!');\n    } catch (error) {\n      alert('Failed to send email');\n      console.error(error);\n      return;\n    }\n\n    if (draft?.id) {\n      await deleteDraft(draft.id);\n    }\n\n    dispatch(clearDraft());\n    dispatch(closeSendMessage());\n  };\n\n  const onSaveDraft = async (formData) => {\n    const result = await saveDraft({\n      id: draft?.id,\n      to: formData.to,\n      subject: formData.subject,\n      message: formData.message,\n    });\n    dispatch(clearDraft());\n    dispatch(closeSendMessage());\n  };\n\n  return (\n    <div className='sendMail'>\n      <div className='sendMail__header'>\n        <h3>New Message</h3>\n        <CloseIcon onClick={() => dispatch(closeSendMessage())} className='sendMail__close' />\n      </div>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input name='to' placeholder='To' type='email' ref={register({ required: true })} />\n        {errors.to && <p className='sendMail__error'>To is Required!</p>}\n\n        <input\n          name='subject'\n          placeholder='Subject'\n          type='text'\n          ref={register({ required: true })}\n        />\n        {errors.subject && <p className='sendMail__error'>Subject is Required!</p>}\n\n        <input\n          name='message'\n          placeholder='Message...'\n          type='text'\n          className='sendMail__message'\n          ref={register({ required: true })}\n        />\n        {errors.message && <p className='sendMail__error'>Message is Required!</p>}\n\n        <div className='sendMail__options'>\n          <Button className='sendMail__send' variant='contained' color='primary' type='submit'>\n            Send\n          </Button>\n          <Button\n            className='sendMail__draft'\n            variant='contained'\n            style={{ backgroundColor: '#f4b400', color: '#000' }}\n            onClick={handleSubmit(onSaveDraft)}\n          >\n            Draft\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default SendMail;\n","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Login.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\EmailList.js",["93"],"import React, { useEffect, useState } from 'react';\nimport { Checkbox, IconButton } from '@material-ui/core';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Info from '@material-ui/icons/Info';\nimport ForumIcon from '@material-ui/icons/Forum';\nimport KeyboardHideIcon from '@material-ui/icons/KeyboardHide';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport PeopleIcon from '@material-ui/icons/People';\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\nimport './EmailList.css';\nimport Section from './Section';\nimport EmailRow from './EmailRow';\nimport { db } from './firebase';\nimport filterEmails from './utils/filterEmails';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport VirtualKeyboard from './VirtualKeyboard';\nimport { loadDrafts } from './utils/draftStorage';\nimport { fetchGmailMessages } from './utils/gmailApi';\n\nfunction EmailList({ toggleTheme, folder = 'inbox', searchQuery = '' }) {\n  const [emails, setEmails] = useState([]);\n  const [selectedEmails, setSelectedEmails] = useState([]);\n  const [selectedTab, setSelectedTab] = useState('Primary');\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n  const [optionsAnchor, setOptionsAnchor] = useState(null);\n  const optionsOpen = Boolean(optionsAnchor);\n  const [showKeyboard, setShowKeyboard] = useState(false);\n\n  const handleMenuOpen = (event) => setAnchorEl(event.currentTarget);\n  const handleOptionsOpen = (event) => setOptionsAnchor(event.currentTarget);\n  const handleKeyboardOpen = () => setShowKeyboard((prev) => !prev);\n  const handleKeyboardClose = () => setShowKeyboard(false);\n  const handleMenuClose = () => setAnchorEl(null);\n  const handleOptionsClose = () => setOptionsAnchor(null);\n\n  const toggleSelectEmail = (id) => {\n    setSelectedEmails((prev) => (prev.includes(id) ? prev.filter((e) => e !== id) : [...prev, id]));\n  };\n\n  const handleSelectAllChange = (e) => {\n    if (e.target.checked) {\n      setSelectedEmails(emails.map((email) => email.id));\n    } else {\n      setSelectedEmails([]);\n    }\n  };\n\n  const markAsRead = async () => {\n    await Promise.all(\n      selectedEmails.map((id) => db.collection('emails').doc(id).update({ read: true })),\n    );\n    await fetchEmails();\n    setSelectedEmails([]);\n  };\n\n  const markAsUnread = async () => {\n    await Promise.all(\n      selectedEmails.map((id) => db.collection('emails').doc(id).update({ read: false })),\n    );\n    await fetchEmails();\n    setSelectedEmails([]);\n  };\n\n  const deleteSelected = async () => {\n    await Promise.all(\n      selectedEmails.map(async (id) => {\n        const docRef = db.collection('emails').doc(id);\n        const snapshot = await docRef.get();\n        const currentFolder = snapshot.data().folder;\n        if (currentFolder === 'trash') {\n          await docRef.delete();\n        } else {\n          await docRef.update({ folder: 'trash' });\n        }\n      }),\n    );\n    setSelectedEmails([]);\n    await fetchEmails();\n  };\n\n  const fetchEmails = async () => {\n    try {\n      if (folder === 'inbox') {\n        const gmailMessages = await fetchGmailMessages();\n        const searchLower = searchQuery.toLowerCase();\n        const searched = gmailMessages.filter(\n          (email) =>\n            !searchLower ||\n            email.subject?.toLowerCase().includes(searchLower) ||\n            email.message?.toLowerCase().includes(searchLower) ||\n            email.to?.toLowerCase().includes(searchLower) ||\n            email.from?.toLowerCase().includes(searchLower),\n        );\n        setEmails(searched);\n      } else {\n        const snapshot = await db.collection('emails').orderBy('timestamp', 'desc').get();\n        const items = snapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        const filtered = filterEmails(items, folder, selectedTab);\n        const searchLower = searchQuery.toLowerCase();\n        const searched = filtered.filter(\n          (email) =>\n            !searchLower ||\n            email.subject?.toLowerCase().includes(searchLower) ||\n            email.message?.toLowerCase().includes(searchLower) ||\n            email.to?.toLowerCase().includes(searchLower) ||\n            email.from?.toLowerCase().includes(searchLower),\n        );\n        setEmails(searched);\n      }\n    } catch (e) {\n      if (folder === 'drafts') {\n        const drafts = await loadDrafts();\n        const filtered = filterEmails(drafts, folder, selectedTab);\n        const searchLower = searchQuery.toLowerCase();\n        const searched = filtered.filter(\n          (email) =>\n            !searchLower ||\n            email.subject?.toLowerCase().includes(searchLower) ||\n            email.message?.toLowerCase().includes(searchLower) ||\n            email.to?.toLowerCase().includes(searchLower) ||\n            email.from?.toLowerCase().includes(searchLower),\n        );\n        setEmails(searched);\n      } else {\n        setEmails([]);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchEmails();\n  }, [folder, selectedTab, searchQuery]);\n\n  return (\n    <div className='emailList'>\n      <div className='emailList__settings'>\n        <div className='emailList__settingsLeft'>\n          <Checkbox\n            indeterminate={selectedEmails.length > 0 && selectedEmails.length < emails.length}\n            checked={emails.length > 0 && selectedEmails.length === emails.length}\n            onChange={handleSelectAllChange}\n          />\n          <IconButton>\n            <ArrowDropDownIcon />\n          </IconButton>\n          <IconButton onClick={fetchEmails}>\n            <RefreshIcon />\n          </IconButton>\n          <IconButton onClick={handleOptionsOpen}>\n            <MoreVertIcon />\n          </IconButton>\n          <Menu anchorEl={optionsAnchor} open={optionsOpen} onClose={handleOptionsClose}>\n            <MenuItem\n              onClick={() => {\n                markAsRead();\n                handleOptionsClose();\n              }}\n            >\n              Mark as read\n            </MenuItem>\n            <MenuItem\n              onClick={() => {\n                markAsUnread();\n                handleOptionsClose();\n              }}\n            >\n              Mark as unread\n            </MenuItem>\n            <MenuItem\n              onClick={() => {\n                deleteSelected();\n                handleOptionsClose();\n              }}\n            >\n              Delete\n            </MenuItem>\n          </Menu>\n        </div>\n        <div className='emailList__settingsRight'>\n          <IconButton onClick={handleKeyboardOpen}>\n            <KeyboardHideIcon />\n          </IconButton>\n          <IconButton onClick={handleMenuOpen}>\n            <SettingsIcon />\n          </IconButton>\n          <Menu anchorEl={anchorEl} open={open} onClose={handleMenuClose}>\n            <MenuItem\n              onClick={() => {\n                toggleTheme();\n                handleMenuClose();\n              }}\n            >\n              Change Theme\n            </MenuItem>\n            <MenuItem onClick={handleMenuClose}>Settings</MenuItem>\n          </Menu>\n        </div>\n      </div>\n\n      <div className='emailList__sections'>\n        <Section\n          Icon={InboxIcon}\n          title='Primary'\n          color='red'\n          selected={selectedTab === 'Primary'}\n          onClick={() => setSelectedTab('Primary')}\n        />\n        <Section\n          Icon={LocalOfferIcon}\n          title='Promotions'\n          color='green'\n          selected={selectedTab === 'Promotions'}\n          onClick={() => setSelectedTab('Promotions')}\n        />\n        <Section\n          Icon={PeopleIcon}\n          title='Social'\n          color='blue'\n          selected={selectedTab === 'Social'}\n          onClick={() => setSelectedTab('Social')}\n        />\n        <Section\n          Icon={Info}\n          title='Updates'\n          color='purple'\n          selected={selectedTab === 'Updates'}\n          onClick={() => setSelectedTab('Updates')}\n        />\n        <Section\n          Icon={ForumIcon}\n          title='Forms'\n          color='orange'\n          selected={selectedTab === 'Forms'}\n          onClick={() => setSelectedTab('Forms')}\n        />\n      </div>\n\n      {showKeyboard && <VirtualKeyboard onClose={handleKeyboardClose} />}\n\n      <div className='emailList__list'>\n        {emails.length === 0 ? (\n          <div className='emailList__empty'>\n            {searchQuery ? 'No emails found' : 'No emails to display'}\n          </div>\n        ) : (\n          emails.map(({ id, to, subject, message, timestamp, folder: mailFolder, read }) => (\n            <EmailRow\n              key={id}\n              id={id}\n              title={to}\n              subject={subject}\n              description={message}\n              time={timestamp instanceof Date ? timestamp.toUTCString() : ''}\n              folder={mailFolder}\n              read={read}\n              selected={selectedEmails.includes(id)}\n              onSelect={toggleSelectEmail}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default EmailList;\n","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\features\\userSlice.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\features\\mailSlice.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\SidebarOption.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\EmailRow.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Section.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\VirtualKeyboard.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\utils\\filterEmails.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\utils\\draftStorage.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\utils\\googleAuth.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\utils\\gmailApi.js",["94"],"export const fetchGmailMessages = async () => {\r\n  try {\r\n    const user = gapi.auth2.getAuthInstance().currentUser.get();\r\n\r\n    if (!user.isSignedIn()) {\r\n      throw new Error('User not signed in');\r\n    }\r\n\r\n    const token = user.getAuthResponse().access_token;\r\n\r\n    const response = await fetch(\r\n      'https://gmail.googleapis.com/gmail/v1/users/me/messages?maxResults=25',\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      },\r\n    );\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      console.error('Gmail fetch error:', data);\r\n      throw new Error(data.error.message);\r\n    }\r\n\r\n    const messageIds = data.messages || [];\r\n\r\n    const messages = await Promise.all(\r\n      messageIds.map(async ({ id }) => {\r\n        const msgResponse = await fetch(\r\n          `https://gmail.googleapis.com/gmail/v1/users/me/messages/${id}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          },\r\n        );\r\n\r\n        const msg = await msgResponse.json();\r\n        const headers = msg.payload.headers;\r\n        const getHeader = (name) =>\r\n          headers.find((h) => h.name.toLowerCase() === name.toLowerCase())?.value || '';\r\n\r\n        return {\r\n          id: msg.id,\r\n          from: getHeader('From'),\r\n          to: getHeader('To'),\r\n          subject: getHeader('Subject'),\r\n          message: msg.snippet,\r\n          timestamp: new Date(parseInt(msg.internalDate)),\r\n          folder: 'inbox',\r\n          read: !msg.labelIds.includes('UNREAD'),\r\n        };\r\n      }),\r\n    );\r\n\r\n    return messages;\r\n  } catch (error) {\r\n    console.error('Error fetching Gmail messages:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport async function sendGmailMessage({ to, subject, message }) {\r\n  const headers = [\r\n    `To: ${to}`,\r\n    'Content-Type: text/html; charset=UTF-8',\r\n    'MIME-Version: 1.0',\r\n    `Subject: ${subject}`,\r\n    '',\r\n    message,\r\n  ];\r\n\r\n  const email = headers.join('\\n');\r\n\r\n  const base64EncodedEmail = btoa(unescape(encodeURIComponent(email)))\r\n    .replace(/\\+/g, '-')\r\n    .replace(/\\//g, '_');\r\n\r\n  try {\r\n    const response = await window.gapi.client.gmail.users.messages.send({\r\n      userId: 'me',\r\n      resource: {\r\n        raw: base64EncodedEmail,\r\n      },\r\n    });\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Failed to send Gmail message', error);\r\n    throw error;\r\n  }\r\n}\r\n",{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":47,"column":11,"nodeType":"101","messageId":"102","endLine":47,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":140,"column":6,"nodeType":"105","endLine":140,"endColumn":40,"suggestions":"106"},{"ruleId":"107","severity":2,"message":"108","line":3,"column":18,"nodeType":"101","messageId":"109","endLine":3,"endColumn":22},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'result' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchEmails'. Either include it or remove the dependency array.","ArrayExpression",["112"],"no-undef","'gapi' is not defined.","undef","no-global-assign","no-unsafe-negation",{"desc":"113","fix":"114"},"Update the dependencies array to be: [folder, selectedTab, searchQuery, fetchEmails]",{"range":"115","text":"116"},[5224,5258],"[folder, selectedTab, searchQuery, fetchEmails]"]