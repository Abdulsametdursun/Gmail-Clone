[{"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\index.js":"1","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\App.js":"2","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\serviceWorker.js":"3","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\app\\store.js":"4","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Sidebar.js":"5","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Header.js":"6","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Mail.js":"7","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\firebase.js":"8","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\SendMail.js":"9","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Login.js":"10","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\EmailList.js":"11","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\features\\userSlice.js":"12","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\features\\mailSlice.js":"13","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\SidebarOption.js":"14","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\EmailRow.js":"15","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Section.js":"16","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\VirtualKeyboard.js":"17","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\utils\\filterEmails.js":"18"},{"size":644,"mtime":1615206821000,"results":"19","hashOfConfig":"20"},{"size":3114,"mtime":1751386388642,"results":"21","hashOfConfig":"20"},{"size":5141,"mtime":1615206821000,"results":"22","hashOfConfig":"20"},{"size":260,"mtime":1615206821000,"results":"23","hashOfConfig":"20"},{"size":5127,"mtime":1751386594732,"results":"24","hashOfConfig":"20"},{"size":1447,"mtime":1751333510114,"results":"25","hashOfConfig":"20"},{"size":4321,"mtime":1751387030923,"results":"26","hashOfConfig":"20"},{"size":627,"mtime":1750800789910,"results":"27","hashOfConfig":"20"},{"size":2059,"mtime":1751386471190,"results":"28","hashOfConfig":"20"},{"size":1013,"mtime":1750786817060,"results":"29","hashOfConfig":"20"},{"size":7237,"mtime":1751385343562,"results":"30","hashOfConfig":"20"},{"size":462,"mtime":1615206821000,"results":"31","hashOfConfig":"20"},{"size":756,"mtime":1615206821000,"results":"32","hashOfConfig":"20"},{"size":797,"mtime":1751333678480,"results":"33","hashOfConfig":"20"},{"size":1743,"mtime":1751335620514,"results":"34","hashOfConfig":"20"},{"size":414,"mtime":1751335659812,"results":"35","hashOfConfig":"20"},{"size":5357,"mtime":1751328606158,"results":"36","hashOfConfig":"20"},{"size":1078,"mtime":1751385383723,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"16nz92s",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\index.js",[],["76","77"],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\App.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\serviceWorker.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\app\\store.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Sidebar.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Header.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Mail.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\firebase.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\SendMail.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Login.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\EmailList.js",["78"],"import React, { useEffect, useState } from 'react';\nimport { Checkbox, IconButton } from '@material-ui/core';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Info from '@material-ui/icons/Info';\nimport ForumIcon from '@material-ui/icons/Forum';\nimport KeyboardHideIcon from '@material-ui/icons/KeyboardHide';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport PeopleIcon from '@material-ui/icons/People';\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\nimport './EmailList.css';\nimport Section from './Section';\nimport EmailRow from './EmailRow';\nimport { db } from './firebase';\nimport filterEmails from './utils/filterEmails';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport VirtualKeyboard from './VirtualKeyboard';\n\nfunction EmailList({ toggleTheme, folder = 'inbox' }) {\n  const [emails, setEmails] = useState([]);\n  const [selectedEmails, setSelectedEmails] = useState([]);\n  const [selectedTab, setSelectedTab] = useState('Primary');\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n  const [optionsAnchor, setOptionsAnchor] = useState(null);\n  const optionsOpen = Boolean(optionsAnchor);\n  const [showKeyboard, setShowKeyboard] = useState(false);\n\n  const handleMenuOpen = (event) => setAnchorEl(event.currentTarget);\n  const handleOptionsOpen = (event) => setOptionsAnchor(event.currentTarget);\n  const handleKeyboardOpen = () => setShowKeyboard((prev) => !prev);\n  const handleKeyboardClose = () => setShowKeyboard(false);\n  const handleMenuClose = () => setAnchorEl(null);\n  const handleOptionsClose = () => setOptionsAnchor(null);\n\n  const toggleSelectEmail = (id) => {\n    setSelectedEmails((prev) => (prev.includes(id) ? prev.filter((e) => e !== id) : [...prev, id]));\n  };\n\n  const handleSelectAllChange = (e) => {\n    if (e.target.checked) {\n      setSelectedEmails(emails.map((email) => email.id));\n    } else {\n      setSelectedEmails([]);\n    }\n  };\n\n  const markAsRead = () => {\n    selectedEmails.forEach((id) => {\n      db.collection('emails').doc(id).update({ read: true });\n    });\n    setSelectedEmails([]);\n  };\n\n  const markAsUnread = () => {\n    selectedEmails.forEach((id) => {\n      db.collection('emails').doc(id).update({ read: false });\n    });\n    setSelectedEmails([]);\n  };\n\n  const deleteSelected = () => {\n    selectedEmails.forEach((id) => {\n      db.collection('emails').doc(id).update({ folder: 'trash' });\n    });\n    setSelectedEmails([]);\n  };\n\n  const fetchEmails = () => {\n    db.collection('emails')\n      .orderBy('timestamp', 'desc')\n      .get()\n      .then((snapshot) => {\n        const items = snapshot.docs.map((doc) => ({ id: doc.id, data: doc.data() }));\n        const filtered = filterEmails(\n          items.map((e) => ({ id: e.id, ...e.data })),\n          folder,\n          selectedTab,\n        );\n        setEmails(filtered.map((e) => ({ id: e.id, data: { ...e } })));\n      });\n  };\n\n  useEffect(() => {\n    fetchEmails();\n  }, [folder, selectedTab]);\n\n  return (\n    <div className='emailList'>\n      <div className='emailList__settings'>\n        <div className='emailList__settingsLeft'>\n          <Checkbox\n            indeterminate={selectedEmails.length > 0 && selectedEmails.length < emails.length}\n            checked={emails.length > 0 && selectedEmails.length === emails.length}\n            onChange={handleSelectAllChange}\n          />\n          <IconButton>\n            <ArrowDropDownIcon />\n          </IconButton>\n          <IconButton onClick={fetchEmails}>\n            <RefreshIcon />\n          </IconButton>\n          <IconButton onClick={handleOptionsOpen}>\n            <MoreVertIcon />\n          </IconButton>\n          <Menu anchorEl={optionsAnchor} open={optionsOpen} onClose={handleOptionsClose}>\n            <MenuItem\n              onClick={() => {\n                markAsRead();\n                handleOptionsClose();\n              }}\n            >\n              Mark as read\n            </MenuItem>\n            <MenuItem\n              onClick={() => {\n                markAsUnread();\n                handleOptionsClose();\n              }}\n            >\n              Mark as unread\n            </MenuItem>\n            <MenuItem\n              onClick={() => {\n                deleteSelected();\n                handleOptionsClose();\n              }}\n            >\n              Delete\n            </MenuItem>\n          </Menu>\n        </div>\n        <div className='emailList__settingsRight'>\n          <IconButton onClick={handleKeyboardOpen}>\n            <KeyboardHideIcon />\n          </IconButton>\n          <IconButton onClick={handleMenuOpen}>\n            <SettingsIcon />\n          </IconButton>\n          <Menu anchorEl={anchorEl} open={open} onClose={handleMenuClose}>\n            <MenuItem\n              onClick={() => {\n                toggleTheme();\n                handleMenuClose();\n              }}\n            >\n              Change Theme\n            </MenuItem>\n            <MenuItem onClick={handleMenuClose}>Settings</MenuItem>\n          </Menu>\n        </div>\n      </div>\n\n      <div className='emailList__sections'>\n        <Section\n          Icon={InboxIcon}\n          title='Primary'\n          color='red'\n          selected={selectedTab === 'Primary'}\n          onClick={() => setSelectedTab('Primary')}\n        />\n        <Section\n          Icon={LocalOfferIcon}\n          title='Promotions'\n          color='green'\n          selected={selectedTab === 'Promotions'}\n          onClick={() => setSelectedTab('Promotions')}\n        />\n        <Section\n          Icon={PeopleIcon}\n          title='Social'\n          color='blue'\n          selected={selectedTab === 'Social'}\n          onClick={() => setSelectedTab('Social')}\n        />\n        <Section\n          Icon={Info}\n          title='Updates'\n          color='purple'\n          selected={selectedTab === 'Updates'}\n          onClick={() => setSelectedTab('Updates')}\n        />\n        <Section\n          Icon={ForumIcon}\n          title='Forms'\n          color='orange'\n          selected={selectedTab === 'Forms'}\n          onClick={() => setSelectedTab('Forms')}\n        />\n      </div>\n\n      {showKeyboard && <VirtualKeyboard onClose={handleKeyboardClose} />}\n\n      <div className='emailList__list'>\n        {emails.length === 0 ? (\n          <div className='emailList__empty'>No emails to display</div>\n        ) : (\n          emails.map(\n            ({ id, data: { to, subject, message, timestamp, folder: mailFolder, read } }) => (\n              <EmailRow\n                key={id}\n                id={id}\n                title={to}\n                subject={subject}\n                description={message}\n                time={timestamp ? new Date(timestamp.seconds * 1000).toUTCString() : ''}\n                folder={mailFolder}\n                read={read}\n                selected={selectedEmails.includes(id)}\n                onSelect={toggleSelectEmail}\n              />\n            ),\n          )\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default EmailList;\n","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\features\\userSlice.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\features\\mailSlice.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\SidebarOption.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\EmailRow.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Section.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\VirtualKeyboard.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\utils\\filterEmails.js",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":89,"column":6,"nodeType":"85","endLine":89,"endColumn":27,"suggestions":"86"},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchEmails'. Either include it or remove the dependency array.","ArrayExpression",["89"],"no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},"Update the dependencies array to be: [fetchEmails, folder, selectedTab]",{"range":"92","text":"93"},[3185,3206],"[fetchEmails, folder, selectedTab]"]