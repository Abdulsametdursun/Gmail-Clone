[{"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\index.js":"1","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\App.js":"2","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\serviceWorker.js":"3","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\app\\store.js":"4","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Sidebar.js":"5","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Header.js":"6","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Mail.js":"7","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\firebase.js":"8","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\SendMail.js":"9","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Login.js":"10","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\EmailList.js":"11","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\features\\userSlice.js":"12","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\features\\mailSlice.js":"13","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\SidebarOption.js":"14","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\EmailRow.js":"15","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Section.js":"16","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\VirtualKeyboard.js":"17","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\utils\\filterEmails.js":"18","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\utils\\draftStorage.js":"19","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\utils\\googleAuth.js":"20","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\utils\\gmailApi.js":"21"},{"size":644,"mtime":1615206821000,"results":"22","hashOfConfig":"23"},{"size":3531,"mtime":1751591077235,"results":"24","hashOfConfig":"23"},{"size":5141,"mtime":1615206821000,"results":"25","hashOfConfig":"23"},{"size":260,"mtime":1615206821000,"results":"26","hashOfConfig":"23"},{"size":5127,"mtime":1751386594732,"results":"27","hashOfConfig":"23"},{"size":2642,"mtime":1751588780878,"results":"28","hashOfConfig":"23"},{"size":4321,"mtime":1751387030923,"results":"29","hashOfConfig":"23"},{"size":761,"mtime":1751764513742,"results":"30","hashOfConfig":"23"},{"size":3279,"mtime":1751764494612,"results":"31","hashOfConfig":"23"},{"size":1068,"mtime":1751763849094,"results":"32","hashOfConfig":"23"},{"size":7891,"mtime":1751764428540,"results":"33","hashOfConfig":"23"},{"size":462,"mtime":1615206821000,"results":"34","hashOfConfig":"23"},{"size":1018,"mtime":1751577226033,"results":"35","hashOfConfig":"23"},{"size":797,"mtime":1751333678480,"results":"36","hashOfConfig":"23"},{"size":2017,"mtime":1751577142084,"results":"37","hashOfConfig":"23"},{"size":414,"mtime":1751335659812,"results":"38","hashOfConfig":"23"},{"size":5357,"mtime":1751328606158,"results":"39","hashOfConfig":"23"},{"size":1078,"mtime":1751385383723,"results":"40","hashOfConfig":"23"},{"size":2312,"mtime":1751577261002,"results":"41","hashOfConfig":"23"},{"size":831,"mtime":1751591102104,"results":"42","hashOfConfig":"23"},{"size":2524,"mtime":1751764677008,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1lveh3x",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\index.js",[],["89","90"],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\App.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\serviceWorker.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\app\\store.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Sidebar.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Header.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Mail.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\firebase.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\SendMail.js",["91"],"import React, { useEffect } from 'react';\nimport './SendMail.css';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Button } from '@material-ui/core';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { closeSendMessage, selectDraft, clearDraft } from './features/mailSlice';\nimport { saveDraft, deleteDraft } from './utils/draftStorage';\nimport { selectUser } from './features/userSlice';\nimport { sendEmail as sendGmailEmail } from './utils/gmailApi';\n\nfunction SendMail() {\n  const draft = useSelector(selectDraft);\n  const user = useSelector(selectUser);\n  const { register, handleSubmit, errors, reset } = useForm({\n    defaultValues: draft || {},\n  });\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    reset(draft || {});\n  }, [draft, reset]);\n\n  const onSubmit = async (formData) => {\n    console.log(formData);\n\n    // If we have an OAuth token, also send the email using Gmail API\n    if (user?.token) {\n      try {\n        await sendGmailEmail(user.token, {\n          to: formData.to,\n          subject: formData.subject,\n          message: formData.message,\n        });\n        alert('Email sent successfully!');\n      } catch (e) {\n        alert('Failed to send email');\n        console.error('Failed to send via Gmail API', e);\n        return;\n      }\n    } else {\n      alert('Failed to send email: No OAuth token');\n      return;\n    }\n\n    if (draft?.id) {\n      await deleteDraft(draft.id);\n    }\n\n    dispatch(clearDraft());\n    dispatch(closeSendMessage());\n  };\n\n  const onSaveDraft = async (formData) => {\n    const result = await saveDraft({\n      id: draft?.id,\n      to: formData.to,\n      subject: formData.subject,\n      message: formData.message,\n    });\n    dispatch(clearDraft());\n    dispatch(closeSendMessage());\n  };\n\n  return (\n    <div className='sendMail'>\n      <div className='sendMail__header'>\n        <h3>New Message</h3>\n        <CloseIcon onClick={() => dispatch(closeSendMessage())} className='sendMail__close' />\n      </div>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input name='to' placeholder='To' type='email' ref={register({ required: true })} />\n        {errors.to && <p className='sendMail__error'>To is Required!</p>}\n\n        <input\n          name='subject'\n          placeholder='Subject'\n          type='text'\n          ref={register({ required: true })}\n        />\n        {errors.subject && <p className='sendMail__error'>Subject is Required!</p>}\n\n        <input\n          name='message'\n          placeholder='Message...'\n          type='text'\n          className='sendMail__message'\n          ref={register({ required: true })}\n        />\n        {errors.message && <p className='sendMail__error'>Message is Required!</p>}\n\n        <div className='sendMail__options'>\n          <Button className='sendMail__send' variant='contained' color='primary' type='submit'>\n            Send\n          </Button>\n          <Button\n            className='sendMail__draft'\n            variant='contained'\n            style={{ backgroundColor: '#f4b400', color: '#000' }}\n            onClick={handleSubmit(onSaveDraft)}\n          >\n            Draft\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default SendMail;\n","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Login.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\EmailList.js",["92"],"import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Checkbox, IconButton, Menu, MenuItem } from '@material-ui/core';\nimport {\n  ArrowDropDown as ArrowDropDownIcon,\n  Refresh as RefreshIcon,\n  MoreVert as MoreVertIcon,\n  Settings as SettingsIcon,\n  Info as InfoIcon,\n  Forum as ForumIcon,\n  KeyboardHide as KeyboardHideIcon,\n  Inbox as InboxIcon,\n  People as PeopleIcon,\n  LocalOffer as LocalOfferIcon,\n} from '@material-ui/icons';\n\nimport './EmailList.css';\nimport Section from './Section';\nimport EmailRow from './EmailRow';\nimport { db } from './firebase';\nimport filterEmails from './utils/filterEmails';\nimport { loadDrafts } from './utils/draftStorage';\nimport { fetchGmailMessages } from './utils/gmailApi';\nimport VirtualKeyboard from './VirtualKeyboard';\nimport { selectUser } from './features/userSlice';\n\nfunction EmailList({ toggleTheme, folder = 'inbox', searchQuery = '' }) {\n  const user = useSelector(selectUser);\n  const [emails, setEmails] = useState([]);\n  const [selectedEmails, setSelectedEmails] = useState([]);\n  const [selectedTab, setSelectedTab] = useState('Primary');\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [optionsAnchor, setOptionsAnchor] = useState(null);\n  const [showKeyboard, setShowKeyboard] = useState(false);\n\n  const handleMenuOpen = (e) => setAnchorEl(e.currentTarget);\n  const handleMenuClose = () => setAnchorEl(null);\n  const handleOptionsOpen = (e) => setOptionsAnchor(e.currentTarget);\n  const handleOptionsClose = () => setOptionsAnchor(null);\n  const toggleKeyboard = () => setShowKeyboard((prev) => !prev);\n\n  const toggleSelectEmail = (id) => {\n    setSelectedEmails((prev) => (prev.includes(id) ? prev.filter((e) => e !== id) : [...prev, id]));\n  };\n\n  const handleSelectAllChange = (e) => {\n    setSelectedEmails(e.target.checked ? emails.map((e) => e.id) : []);\n  };\n\n  const markAsRead = async () => {\n    await Promise.all(\n      selectedEmails.map((id) => db.collection('emails').doc(id).update({ read: true })),\n    );\n    setSelectedEmails([]);\n    await fetchEmails();\n  };\n\n  const markAsUnread = async () => {\n    await Promise.all(\n      selectedEmails.map((id) => db.collection('emails').doc(id).update({ read: false })),\n    );\n    setSelectedEmails([]);\n    await fetchEmails();\n  };\n\n  const deleteSelected = async () => {\n    await Promise.all(\n      selectedEmails.map(async (id) => {\n        const doc = db.collection('emails').doc(id);\n        const data = (await doc.get()).data();\n        if (data.folder === 'trash') await doc.delete();\n        else await doc.update({ folder: 'trash' });\n      }),\n    );\n    setSelectedEmails([]);\n    await fetchEmails();\n  };\n\n  const fetchEmails = async () => {\n    try {\n      let fetched = [];\n\n      if (folder === 'inbox' && user?.token) {\n        fetched = await fetchGmailMessages(user.token);\n      } else if (folder === 'drafts') {\n        fetched = await loadDrafts();\n      } else {\n        const snapshot = await db.collection('emails').orderBy('timestamp', 'desc').get();\n        fetched = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n      }\n\n      const filtered = filterEmails(fetched, folder, selectedTab);\n      const searchLower = searchQuery.toLowerCase();\n\n      const searched = filtered.filter(\n        (email) =>\n          !searchLower ||\n          email.subject?.toLowerCase().includes(searchLower) ||\n          email.message?.toLowerCase().includes(searchLower) ||\n          email.to?.toLowerCase().includes(searchLower) ||\n          email.from?.toLowerCase().includes(searchLower),\n      );\n\n      setEmails(searched);\n    } catch (err) {\n      console.error('Email fetch error:', err);\n      setEmails([]);\n    }\n  };\n\n  useEffect(() => {\n    fetchEmails();\n  }, [folder, selectedTab, searchQuery, user?.token]);\n\n  return (\n    <div className='emailList'>\n      <div className='emailList__settings'>\n        <div className='emailList__settingsLeft'>\n          <Checkbox\n            indeterminate={selectedEmails.length > 0 && selectedEmails.length < emails.length}\n            checked={emails.length > 0 && selectedEmails.length === emails.length}\n            onChange={handleSelectAllChange}\n          />\n          <IconButton>\n            <ArrowDropDownIcon />\n          </IconButton>\n          <IconButton onClick={fetchEmails}>\n            <RefreshIcon />\n          </IconButton>\n          <IconButton onClick={handleOptionsOpen}>\n            <MoreVertIcon />\n          </IconButton>\n          <Menu anchorEl={optionsAnchor} open={Boolean(optionsAnchor)} onClose={handleOptionsClose}>\n            <MenuItem\n              onClick={() => {\n                markAsRead();\n                handleOptionsClose();\n              }}\n            >\n              Mark as read\n            </MenuItem>\n            <MenuItem\n              onClick={() => {\n                markAsUnread();\n                handleOptionsClose();\n              }}\n            >\n              Mark as unread\n            </MenuItem>\n            <MenuItem\n              onClick={() => {\n                deleteSelected();\n                handleOptionsClose();\n              }}\n            >\n              Delete\n            </MenuItem>\n          </Menu>\n        </div>\n        <div className='emailList__settingsRight'>\n          <IconButton onClick={toggleKeyboard}>\n            <KeyboardHideIcon />\n          </IconButton>\n          <IconButton onClick={handleMenuOpen}>\n            <SettingsIcon />\n          </IconButton>\n          <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleMenuClose}>\n            <MenuItem\n              onClick={() => {\n                toggleTheme();\n                handleMenuClose();\n              }}\n            >\n              Change Theme\n            </MenuItem>\n            <MenuItem onClick={handleMenuClose}>Settings</MenuItem>\n          </Menu>\n        </div>\n      </div>\n\n      <div className='emailList__sections'>\n        <Section\n          Icon={InboxIcon}\n          title='Primary'\n          color='red'\n          selected={selectedTab === 'Primary'}\n          onClick={() => setSelectedTab('Primary')}\n        />\n        <Section\n          Icon={LocalOfferIcon}\n          title='Promotions'\n          color='green'\n          selected={selectedTab === 'Promotions'}\n          onClick={() => setSelectedTab('Promotions')}\n        />\n        <Section\n          Icon={PeopleIcon}\n          title='Social'\n          color='blue'\n          selected={selectedTab === 'Social'}\n          onClick={() => setSelectedTab('Social')}\n        />\n        <Section\n          Icon={InfoIcon}\n          title='Updates'\n          color='purple'\n          selected={selectedTab === 'Updates'}\n          onClick={() => setSelectedTab('Updates')}\n        />\n        <Section\n          Icon={ForumIcon}\n          title='Forms'\n          color='orange'\n          selected={selectedTab === 'Forms'}\n          onClick={() => setSelectedTab('Forms')}\n        />\n      </div>\n\n      {showKeyboard && <VirtualKeyboard onClose={toggleKeyboard} />}\n\n      <div className='emailList__list'>\n        {emails.length === 0 ? (\n          <div className='emailList__empty'>\n            {searchQuery ? 'No emails found' : 'No emails to display'}\n          </div>\n        ) : (\n          emails.map(({ id, to, subject, message, timestamp, folder: mailFolder, read }) => (\n            <EmailRow\n              key={id}\n              id={id}\n              title={to}\n              subject={subject}\n              description={message}\n              time={timestamp?.seconds ? new Date(timestamp.seconds * 1000).toUTCString() : ''}\n              folder={mailFolder}\n              read={read}\n              selected={selectedEmails.includes(id)}\n              onSelect={toggleSelectEmail}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default EmailList;\n","C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\features\\userSlice.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\features\\mailSlice.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\SidebarOption.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\EmailRow.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\Section.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\VirtualKeyboard.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\utils\\filterEmails.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\utils\\draftStorage.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\utils\\googleAuth.js",[],"C:\\Users\\samet\\Desktop\\Projects\\NextJS\\gmail-clone\\src\\utils\\gmailApi.js",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":55,"column":11,"nodeType":"99","messageId":"100","endLine":55,"endColumn":17},{"ruleId":"101","severity":1,"message":"102","line":113,"column":6,"nodeType":"103","endLine":113,"endColumn":53,"suggestions":"104"},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-unused-vars","'result' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchEmails'. Either include it or remove the dependency array.","ArrayExpression",["107"],"no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},"Update the dependencies array to be: [folder, selectedTab, searchQuery, user.token, fetchEmails]",{"range":"110","text":"111"},[3784,3831],"[folder, selectedTab, searchQuery, user.token, fetchEmails]"]